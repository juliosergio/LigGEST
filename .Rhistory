setwd("/media/checo/7B2C787106E895ED/BID2012")
install.packages("rgeos")
library(rgeos)
?`SpatialPolygons
library(sp)
library(sp)
??SpatialPolygons
??version
R.Version()
source('/media/checo/7B2C787106E895ED/LigGEST/LigGEST.R')
5 %/% 2
1i
.7-.6-.1
?zapsmall
7/.1
.7/.1
.7/.1 - 7
.Machine
norm(c(3,4))
norm(as.matrix(c(3,4)))
norm(as.matrix(c(3,4)), "F")
?norm
?kronecker
?image
shiny::runApp('/media/checo/7B2C787106E895ED/LigGEST')
runApp('/media/checo/7B2C787106E895ED/LigGEST')
setwd("/media/checo/7B2C787106E895ED/LigGEST")
shiny::runApp()
{
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
p(id = "date", "Click me to see the date"),
p(id = "coords", "Click me to see the mouse coordinates"),
p(id = "disappear", "Move your mouse here to make the text below disappear"),
p(id = "text", "Hello")
),
server = function(input, output) {
onclick("date", alert(date()))
onclick("coords", function(event) { alert(event) })
onevent("mouseenter", "disappear", hide("text"))
onevent("mouseleave", "disappear", show("text"))
}
)
}
install.packages("shinyjs")
{
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
p(id = "date", "Click me to see the date"),
p(id = "coords", "Click me to see the mouse coordinates"),
p(id = "disappear", "Move your mouse here to make the text below disappear"),
p(id = "text", "Hello")
),
server = function(input, output) {
onclick("date", alert(date()))
onclick("coords", function(event) { alert(event) })
onevent("mouseenter", "disappear", hide("text"))
onevent("mouseleave", "disappear", show("text"))
}
)
}
library(shinyjs)
{
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
p(id = "date", "Click me to see the date"),
p(id = "coords", "Click me to see the mouse coordinates"),
p(id = "disappear", "Move your mouse here to make the text below disappear"),
p(id = "text", "Hello")
),
server = function(input, output) {
onclick("date", alert(date()))
onclick("coords", function(event) { alert(event) })
onevent("mouseenter", "disappear", hide("text"))
onevent("mouseleave", "disappear", show("text"))
}
)
}
?onclick
runApp()
install.packages("miniUI")
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server)
}
cars
ggbrush(mtcars, "hp", "mpg")
runApp()
devtools::install_github("rstudio/shinytest")
library(shinytest)
recordTest(save_dir = ".")
?downloadHandler
runApp()
?observe
toggleState()
?toggleState
runApp()
runApp()
runApp()
if (T) a <- 5
if (T) (a <- 5)
runApp()
runApp()
runApp()
runApp()
?isolate
?downloadButton
?textInput
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
textInput(inputId = "unif", label = "Uniform", "Uniform"),
plotOutput("hist")
)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
textInput(inputId = "unif", label = "Uniform", "Uniform"),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
textInput(inputId = "unif", label = "Uniform", ""),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif!="", { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
textInput(inputId = "unif", label = "Uniform", ""),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif=="", { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
textInput(inputId = "unif", label = "Uniform", ""),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
?reactiveValues
?reactiveVal
runApp()
runApp()
miarch <- readRDS("~/Descargas/miarch.rds")
head(miarch)
nrow(miarch)
